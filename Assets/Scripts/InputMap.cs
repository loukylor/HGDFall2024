//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace HGDFall2024
{
    public partial class @InputMap: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputMap()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inputs"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""8950b347-2020-45e3-b648-3edefd66cc93"",
            ""actions"": [
                {
                    ""name"": ""CycleAttachmentNext"",
                    ""type"": ""Button"",
                    ""id"": ""c38af814-212b-49bf-a2e9-d3fbbebe9db8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CycleAttachmentBack"",
                    ""type"": ""Button"",
                    ""id"": ""ecb09b51-7f62-45f2-b142-0f0020b2f56f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""c8e4ff70-fa0e-4036-be45-17f1cf10cb5e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PointerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""be084ee7-d1a6-4d31-bcfb-18cd9c1669d1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1612f851-7baf-44e8-9a47-8b3b6c9ed37f"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CycleAttachmentNext"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9be1d9bd-db31-4d3f-a0c6-6276adac40e9"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CycleAttachmentBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5cd3f331-70b2-4088-b4d0-5019687f342c"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d59e3bf8-69a9-48db-b1b3-d17f62add6ce"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_CycleAttachmentNext = m_Player.FindAction("CycleAttachmentNext", throwIfNotFound: true);
            m_Player_CycleAttachmentBack = m_Player.FindAction("CycleAttachmentBack", throwIfNotFound: true);
            m_Player_Click = m_Player.FindAction("Click", throwIfNotFound: true);
            m_Player_PointerPosition = m_Player.FindAction("PointerPosition", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player
        private readonly InputActionMap m_Player;
        private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
        private readonly InputAction m_Player_CycleAttachmentNext;
        private readonly InputAction m_Player_CycleAttachmentBack;
        private readonly InputAction m_Player_Click;
        private readonly InputAction m_Player_PointerPosition;
        public struct PlayerActions
        {
            private @InputMap m_Wrapper;
            public PlayerActions(@InputMap wrapper) { m_Wrapper = wrapper; }
            public InputAction @CycleAttachmentNext => m_Wrapper.m_Player_CycleAttachmentNext;
            public InputAction @CycleAttachmentBack => m_Wrapper.m_Player_CycleAttachmentBack;
            public InputAction @Click => m_Wrapper.m_Player_Click;
            public InputAction @PointerPosition => m_Wrapper.m_Player_PointerPosition;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
                @CycleAttachmentNext.started += instance.OnCycleAttachmentNext;
                @CycleAttachmentNext.performed += instance.OnCycleAttachmentNext;
                @CycleAttachmentNext.canceled += instance.OnCycleAttachmentNext;
                @CycleAttachmentBack.started += instance.OnCycleAttachmentBack;
                @CycleAttachmentBack.performed += instance.OnCycleAttachmentBack;
                @CycleAttachmentBack.canceled += instance.OnCycleAttachmentBack;
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @PointerPosition.started += instance.OnPointerPosition;
                @PointerPosition.performed += instance.OnPointerPosition;
                @PointerPosition.canceled += instance.OnPointerPosition;
            }

            private void UnregisterCallbacks(IPlayerActions instance)
            {
                @CycleAttachmentNext.started -= instance.OnCycleAttachmentNext;
                @CycleAttachmentNext.performed -= instance.OnCycleAttachmentNext;
                @CycleAttachmentNext.canceled -= instance.OnCycleAttachmentNext;
                @CycleAttachmentBack.started -= instance.OnCycleAttachmentBack;
                @CycleAttachmentBack.performed -= instance.OnCycleAttachmentBack;
                @CycleAttachmentBack.canceled -= instance.OnCycleAttachmentBack;
                @Click.started -= instance.OnClick;
                @Click.performed -= instance.OnClick;
                @Click.canceled -= instance.OnClick;
                @PointerPosition.started -= instance.OnPointerPosition;
                @PointerPosition.performed -= instance.OnPointerPosition;
                @PointerPosition.canceled -= instance.OnPointerPosition;
            }

            public void RemoveCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerActions @Player => new PlayerActions(this);
        public interface IPlayerActions
        {
            void OnCycleAttachmentNext(InputAction.CallbackContext context);
            void OnCycleAttachmentBack(InputAction.CallbackContext context);
            void OnClick(InputAction.CallbackContext context);
            void OnPointerPosition(InputAction.CallbackContext context);
        }
    }
}
